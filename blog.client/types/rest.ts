/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export class Anonymous implements IAnonymous {
    id!: number;
    name!: string;
    email!: string;
    picture!: string;
    access!: EnumAccess;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.picture = data["picture"] !== undefined ? data["picture"] : <any>null;
            this.access = data["access"] !== undefined ? data["access"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["picture"] = this.picture !== undefined ? this.picture : <any>null;
        data["access"] = this.access !== undefined ? this.access : <any>null;
        return data; 
    }
}

export interface IAnonymous {
    id: number;
    name: string;
    email: string;
    picture: string;
    access: EnumAccess;
}

export class AccountSimpleResponse extends Anonymous implements IAccountSimpleResponse {

    constructor(data?: IAccountSimpleResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AccountSimpleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountSimpleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountSimpleResponse extends IAnonymous {
}

export enum EnumAccess {
    Administrator = "Administrator", 
    Moderator = "Moderator", 
    NormalUser = "NormalUser", 
    BannedUser = "BannedUser", 
}

export class BaseDataTransfersOfAccountAndAccountSimpleResponse implements IBaseDataTransfersOfAccountAndAccountSimpleResponse {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountSimpleResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountSimpleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountSimpleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountSimpleResponse {
}

export class Anonymous2 implements IAnonymous2 {
    id!: number;
    name!: string;
    email!: string;
    picture!: string;
    access!: EnumAccess;
    gender!: EnumGender;
    joined!: string;

    constructor(data?: IAnonymous2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.picture = data["picture"] !== undefined ? data["picture"] : <any>null;
            this.access = data["access"] !== undefined ? data["access"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.joined = data["joined"] !== undefined ? data["joined"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous2 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["picture"] = this.picture !== undefined ? this.picture : <any>null;
        data["access"] = this.access !== undefined ? this.access : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["joined"] = this.joined !== undefined ? this.joined : <any>null;
        return data; 
    }
}

export interface IAnonymous2 {
    id: number;
    name: string;
    email: string;
    picture: string;
    access: EnumAccess;
    gender: EnumGender;
    joined: string;
}

export class AccountResponse extends Anonymous2 implements IAccountResponse {

    constructor(data?: IAccountResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AccountResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountResponse extends IAnonymous2 {
}

export enum EnumGender {
    Male = "Male", 
    Female = "Female", 
    Unknown = "Unknown", 
}

export class BaseDataTransfersOfAccountAndAccountResponse implements IBaseDataTransfersOfAccountAndAccountResponse {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountResponse {
}

export class ErrorResponse implements IErrorResponse {
    action?: string | null;
    description?: string | null;
    model?: string | null;

    constructor(data?: IErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.action = data["action"] !== undefined ? data["action"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.model = data["model"] !== undefined ? data["model"] : <any>null;
        }
    }

    static fromJS(data: any): ErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["action"] = this.action !== undefined ? this.action : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        return data; 
    }
}

export interface IErrorResponse {
    action?: string | null;
    description?: string | null;
    model?: string | null;
}

export class AccountChangePasswordRequest implements IAccountChangePasswordRequest {
    password!: string;
    newPassword!: string;

    constructor(data?: IAccountChangePasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.newPassword = data["newPassword"] !== undefined ? data["newPassword"] : <any>null;
        }
    }

    static fromJS(data: any): AccountChangePasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountChangePasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        return data; 
    }
}

export interface IAccountChangePasswordRequest {
    password: string;
    newPassword: string;
}

export class Anonymous3 implements IAnonymous3 {
    name!: string;
    picture!: string;
    gender!: EnumGender;

    constructor(data?: IAnonymous3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.picture = data["picture"] !== undefined ? data["picture"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous3 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["picture"] = this.picture !== undefined ? this.picture : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        return data; 
    }
}

export interface IAnonymous3 {
    name: string;
    picture: string;
    gender: EnumGender;
}

export class AccountUpdateRequest extends Anonymous3 implements IAccountUpdateRequest {

    constructor(data?: IAccountUpdateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AccountUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountUpdateRequest extends IAnonymous3 {
}

export class BaseDataTransfersOfAccountAndAccountUpdateRequest implements IBaseDataTransfersOfAccountAndAccountUpdateRequest {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountUpdateRequest {
}

export class AccountUpdateAccessRequest implements IAccountUpdateAccessRequest {
    account!: AccountIdTransfer;
    access!: EnumAccess;

    constructor(data?: IAccountUpdateAccessRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.account = new AccountIdTransfer();
        }
    }

    init(data?: any) {
        if (data) {
            this.account = data["account"] ? AccountIdTransfer.fromJS(data["account"]) : new AccountIdTransfer();
            this.access = data["access"] !== undefined ? data["access"] : <any>null;
        }
    }

    static fromJS(data: any): AccountUpdateAccessRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountUpdateAccessRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["account"] = this.account ? this.account.toJSON() : <any>null;
        data["access"] = this.access !== undefined ? this.access : <any>null;
        return data; 
    }
}

export interface IAccountUpdateAccessRequest {
    account: AccountIdTransfer;
    access: EnumAccess;
}

export class Anonymous4 implements IAnonymous4 {
    id!: number;

    constructor(data?: IAnonymous4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous4 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IAnonymous4 {
    id: number;
}

export class AccountIdTransfer extends Anonymous4 implements IAccountIdTransfer {

    constructor(data?: IAccountIdTransfer) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AccountIdTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new AccountIdTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountIdTransfer extends IAnonymous4 {
}

export class BaseDataTransfersOfAccountAndAccountIdTransfer implements IBaseDataTransfersOfAccountAndAccountIdTransfer {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountIdTransfer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountIdTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountIdTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountIdTransfer {
}

export class Anonymous5 implements IAnonymous5 {
    password!: string;
    name!: string;
    email!: string;
    picture!: string;
    gender!: EnumGender;

    constructor(data?: IAnonymous5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.picture = data["picture"] !== undefined ? data["picture"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous5 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["picture"] = this.picture !== undefined ? this.picture : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        return data; 
    }
}

export interface IAnonymous5 {
    password: string;
    name: string;
    email: string;
    picture: string;
    gender: EnumGender;
}

export class AccountCreateRequest extends Anonymous5 implements IAccountCreateRequest {

    constructor(data?: IAccountCreateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AccountCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountCreateRequest extends IAnonymous5 {
}

export class BaseDataTransfersOfAccountAndAccountCreateRequest implements IBaseDataTransfersOfAccountAndAccountCreateRequest {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountCreateRequest {
}

export class AccountLoginResponse implements IAccountLoginResponse {
    token!: string;

    constructor(data?: IAccountLoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"] !== undefined ? data["token"] : <any>null;
        }
    }

    static fromJS(data: any): AccountLoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token !== undefined ? this.token : <any>null;
        return data; 
    }
}

export interface IAccountLoginResponse {
    token: string;
}

export class Anonymous6 implements IAnonymous6 {
    email!: string;
    password!: string;

    constructor(data?: IAnonymous6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous6 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export interface IAnonymous6 {
    email: string;
    password: string;
}

export class AccountLoginRequest extends Anonymous6 implements IAccountLoginRequest {

    constructor(data?: IAccountLoginRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): AccountLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAccountLoginRequest extends IAnonymous6 {
}

export class BaseDataTransfersOfAccountAndAccountLoginRequest implements IBaseDataTransfersOfAccountAndAccountLoginRequest {

    constructor(data?: IBaseDataTransfersOfAccountAndAccountLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfAccountAndAccountLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfAccountAndAccountLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfAccountAndAccountLoginRequest {
}

export class Anonymous7 implements IAnonymous7 {
    id!: number;
    content!: string;
    owner!: AccountSimpleResponse;
    post!: PostIdTransfer;
    created!: string;
    modified?: string | null;

    constructor(data?: IAnonymous7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.owner = new AccountSimpleResponse();
            this.post = new PostIdTransfer();
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.owner = data["owner"] ? AccountSimpleResponse.fromJS(data["owner"]) : new AccountSimpleResponse();
            this.post = data["post"] ? PostIdTransfer.fromJS(data["post"]) : new PostIdTransfer();
            this.created = data["created"] !== undefined ? data["created"] : <any>null;
            this.modified = data["modified"] !== undefined ? data["modified"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous7 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>null;
        data["post"] = this.post ? this.post.toJSON() : <any>null;
        data["created"] = this.created !== undefined ? this.created : <any>null;
        data["modified"] = this.modified !== undefined ? this.modified : <any>null;
        return data; 
    }
}

export interface IAnonymous7 {
    id: number;
    content: string;
    owner: AccountSimpleResponse;
    post: PostIdTransfer;
    created: string;
    modified?: string | null;
}

export class CommentResponse extends Anonymous7 implements ICommentResponse {

    constructor(data?: ICommentResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): CommentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CommentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICommentResponse extends IAnonymous7 {
}

export class Anonymous8 implements IAnonymous8 {
    id!: number;

    constructor(data?: IAnonymous8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous8 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IAnonymous8 {
    id: number;
}

export class PostIdTransfer extends Anonymous8 implements IPostIdTransfer {

    constructor(data?: IPostIdTransfer) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PostIdTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new PostIdTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPostIdTransfer extends IAnonymous8 {
}

export class BaseDataTransfersOfPostAndPostIdTransfer implements IBaseDataTransfersOfPostAndPostIdTransfer {

    constructor(data?: IBaseDataTransfersOfPostAndPostIdTransfer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfPostAndPostIdTransfer {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfPostAndPostIdTransfer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfPostAndPostIdTransfer {
}

export class BaseDataTransfersOfCommentAndCommentResponse implements IBaseDataTransfersOfCommentAndCommentResponse {

    constructor(data?: IBaseDataTransfersOfCommentAndCommentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfCommentAndCommentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfCommentAndCommentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfCommentAndCommentResponse {
}

export class Anonymous9 implements IAnonymous9 {
    post!: PostIdTransfer;
    content!: string;

    constructor(data?: IAnonymous9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.post = new PostIdTransfer();
        }
    }

    init(data?: any) {
        if (data) {
            this.post = data["post"] ? PostIdTransfer.fromJS(data["post"]) : new PostIdTransfer();
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous9 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["post"] = this.post ? this.post.toJSON() : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data; 
    }
}

export interface IAnonymous9 {
    post: PostIdTransfer;
    content: string;
}

export class CommentCreateRequest extends Anonymous9 implements ICommentCreateRequest {

    constructor(data?: ICommentCreateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): CommentCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CommentCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICommentCreateRequest extends IAnonymous9 {
}

export class BaseDataTransfersOfCommentAndCommentCreateRequest implements IBaseDataTransfersOfCommentAndCommentCreateRequest {

    constructor(data?: IBaseDataTransfersOfCommentAndCommentCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfCommentAndCommentCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfCommentAndCommentCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfCommentAndCommentCreateRequest {
}

export class Anonymous10 implements IAnonymous10 {
    id!: number;
    content!: string;

    constructor(data?: IAnonymous10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous10 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data; 
    }
}

export interface IAnonymous10 {
    id: number;
    content: string;
}

export class CommentUpdateRequest extends Anonymous10 implements ICommentUpdateRequest {

    constructor(data?: ICommentUpdateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): CommentUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CommentUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICommentUpdateRequest extends IAnonymous10 {
}

export class BaseDataTransfersOfCommentAndCommentUpdateRequest implements IBaseDataTransfersOfCommentAndCommentUpdateRequest {

    constructor(data?: IBaseDataTransfersOfCommentAndCommentUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfCommentAndCommentUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfCommentAndCommentUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfCommentAndCommentUpdateRequest {
}

export class Anonymous11 implements IAnonymous11 {
    id!: number;
    title!: string;
    cover!: string;
    content!: string;

    constructor(data?: IAnonymous11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.cover = data["cover"] !== undefined ? data["cover"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous11 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["cover"] = this.cover !== undefined ? this.cover : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data; 
    }
}

export interface IAnonymous11 {
    id: number;
    title: string;
    cover: string;
    content: string;
}

export class PostListResponse extends Anonymous11 implements IPostListResponse {

    constructor(data?: IPostListResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PostListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PostListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPostListResponse extends IAnonymous11 {
}

export class BaseDataTransfersOfPostAndPostListResponse implements IBaseDataTransfersOfPostAndPostListResponse {

    constructor(data?: IBaseDataTransfersOfPostAndPostListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfPostAndPostListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfPostAndPostListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfPostAndPostListResponse {
}

export class Anonymous12 implements IAnonymous12 {
    id!: number;
    title!: string;
    cover!: string;
    content!: string;
    owner!: AccountSimpleResponse;
    created!: string;
    modified?: string | null;
    comments!: CommentResponse[];

    constructor(data?: IAnonymous12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.owner = new AccountSimpleResponse();
            this.comments = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.cover = data["cover"] !== undefined ? data["cover"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.owner = data["owner"] ? AccountSimpleResponse.fromJS(data["owner"]) : new AccountSimpleResponse();
            this.created = data["created"] !== undefined ? data["created"] : <any>null;
            this.modified = data["modified"] !== undefined ? data["modified"] : <any>null;
            if (Array.isArray(data["comments"])) {
                this.comments = [] as any;
                for (let item of data["comments"])
                    this.comments!.push(CommentResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous12 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["cover"] = this.cover !== undefined ? this.cover : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>null;
        data["created"] = this.created !== undefined ? this.created : <any>null;
        data["modified"] = this.modified !== undefined ? this.modified : <any>null;
        if (Array.isArray(this.comments)) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAnonymous12 {
    id: number;
    title: string;
    cover: string;
    content: string;
    owner: AccountSimpleResponse;
    created: string;
    modified?: string | null;
    comments: CommentResponse[];
}

export class PostResponse extends Anonymous12 implements IPostResponse {

    constructor(data?: IPostResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PostResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PostResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPostResponse extends IAnonymous12 {
}

export class BaseDataTransfersOfPostAndPostResponse implements IBaseDataTransfersOfPostAndPostResponse {

    constructor(data?: IBaseDataTransfersOfPostAndPostResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfPostAndPostResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfPostAndPostResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfPostAndPostResponse {
}

export class Anonymous13 implements IAnonymous13 {
    title!: string;
    cover!: string;
    content!: string;

    constructor(data?: IAnonymous13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.cover = data["cover"] !== undefined ? data["cover"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous13 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["cover"] = this.cover !== undefined ? this.cover : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data; 
    }
}

export interface IAnonymous13 {
    title: string;
    cover: string;
    content: string;
}

export class PostCreateRequest extends Anonymous13 implements IPostCreateRequest {

    constructor(data?: IPostCreateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PostCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPostCreateRequest extends IAnonymous13 {
}

export class BaseDataTransfersOfPostAndPostCreateRequest implements IBaseDataTransfersOfPostAndPostCreateRequest {

    constructor(data?: IBaseDataTransfersOfPostAndPostCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfPostAndPostCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfPostAndPostCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfPostAndPostCreateRequest {
}

export class Anonymous14 implements IAnonymous14 {
    id!: number;
    title!: string;
    cover!: string;
    content!: string;

    constructor(data?: IAnonymous14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.cover = data["cover"] !== undefined ? data["cover"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): Anonymous14 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["cover"] = this.cover !== undefined ? this.cover : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data; 
    }
}

export interface IAnonymous14 {
    id: number;
    title: string;
    cover: string;
    content: string;
}

export class PostUpdateRequest extends Anonymous14 implements IPostUpdateRequest {

    constructor(data?: IPostUpdateRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): PostUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPostUpdateRequest extends IAnonymous14 {
}

export class BaseDataTransfersOfPostAndPostUpdateRequest implements IBaseDataTransfersOfPostAndPostUpdateRequest {

    constructor(data?: IBaseDataTransfersOfPostAndPostUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): BaseDataTransfersOfPostAndPostUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDataTransfersOfPostAndPostUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IBaseDataTransfersOfPostAndPostUpdateRequest {
}